'use client';

import { useState } from 'react';
import { Download, FileText } from 'lucide-react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { Itinerary } from '../types';
import { formatTime, formatDuration } from '../utils/storage';

interface PDFExportProps {
  itinerary: Itinerary;
}

const PDFExport: React.FC<PDFExportProps> = ({ itinerary }) => {
  const [isExporting, setIsExporting] = useState(false);

  const exportToPDF = async () => {
    setIsExporting(true);
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      let yPos = 20;

      // Header
      pdf.setFontSize(24);
      pdf.setTextColor(59, 130, 246); // Blue
      pdf.text('Nepscape Itinerary', pageWidth / 2, yPos, { align: 'center' });
      yPos += 15;

      pdf.setFontSize(18);
      pdf.setTextColor(0, 0, 0);
      pdf.text(itinerary.title, pageWidth / 2, yPos, { align: 'center' });
      yPos += 10;

      pdf.setFontSize(12);
      pdf.setTextColor(107, 114, 128); // Gray
      pdf.text(`${itinerary.destination} ‚Ä¢ ${itinerary.startDate} to ${itinerary.endDate}`, pageWidth / 2, yPos, { align: 'center' });
      yPos += 20;

      // Days
      itinerary.days.forEach((day, dayIndex) => {
        if (yPos > pageHeight - 40) {
          pdf.addPage();
          yPos = 20;
        }

        // Day header
        pdf.setFontSize(16);
        pdf.setTextColor(59, 130, 246);
        pdf.text(`Day ${dayIndex + 1}: ${day.title}`, 20, yPos);
        yPos += 5;

        pdf.setFontSize(10);
        pdf.setTextColor(107, 114, 128);
        pdf.text(day.date, 20, yPos);
        yPos += 15;

        // Activities
        day.activities.forEach((activity, actIndex) => {
          if (yPos > pageHeight - 30) {
            pdf.addPage();
            yPos = 20;
          }

          pdf.setFontSize(12);
          pdf.setTextColor(0, 0, 0);
          pdf.text(`${formatTime(activity.time)} - ${activity.title}`, 30, yPos);
          yPos += 5;

          pdf.setFontSize(10);
          pdf.setTextColor(107, 114, 128);
          pdf.text(`üìç ${activity.location}`, 30, yPos);
          yPos += 4;

          if (activity.description) {
            const splitDesc = pdf.splitTextToSize(activity.description, pageWidth - 60);
            pdf.text(splitDesc, 30, yPos);
            yPos += splitDesc.length * 4;
          }

          pdf.text(`‚è±Ô∏è ${formatDuration(activity.duration)}`, 30, yPos);
          yPos += 8;

          if (actIndex < day.activities.length - 1) {
            pdf.setDrawColor(229, 231, 235);
            pdf.line(30, yPos, pageWidth - 30, yPos);
            yPos += 8;
          }
        });

        yPos += 10;
      });

      // Footer
      const totalPages = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setTextColor(107, 114, 128);
        pdf.text(`Generated by Nepscape ‚Ä¢ Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
      }

      pdf.save(`${itinerary.title.replace(/\s+/g, '_')}_itinerary.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <button
      onClick={exportToPDF}
      disabled={isExporting}
      className="inline-flex items-center gap-2 px-6 py-3 bg-amber-500 text-white rounded-lg hover:bg-amber-600 transition-colors shadow-md hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
    >
      {isExporting ? (
        <>
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
          Generating PDF...
        </>
      ) : (
        <>
          <Download className="h-4 w-4" />
          Export to PDF
        </>
      )}
    </button>
  );
};

export default PDFExport;